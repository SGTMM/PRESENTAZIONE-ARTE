{"mappings":"","sources":["src/joy.js"],"sourcesContent":["/*\n * Name          : joy.js\n * @author       : Roberto D'Amico (Bobboteck)\n * Last modified : 09.06.2020\n * Revision      : 1.1.6\n *\n * Modification History:\n * Date         Version     Modified By     Description\n * 2021-12-21   2.0.0       Roberto D'Amico New version of the project that integrates the callback functions, while \n *                                          maintaining compatibility with previous versions. Fixed Issue #27 too, \n *                                          thanks to @artisticfox8 for the suggestion.\n * 2020-06-09   1.1.6       Roberto D'Amico Fixed Issue #10 and #11\n * 2020-04-20   1.1.5       Roberto D'Amico Correct: Two sticks in a row, thanks to @liamw9534 for the suggestion\n * 2020-04-03               Roberto D'Amico Correct: InternalRadius when change the size of canvas, thanks to \n *                                          @vanslipon for the suggestion\n * 2020-01-07   1.1.4       Roberto D'Amico Close #6 by implementing a new parameter to set the functionality of \n *                                          auto-return to 0 position\n * 2019-11-18   1.1.3       Roberto D'Amico Close #5 correct indication of East direction\n * 2019-11-12   1.1.2       Roberto D'Amico Removed Fix #4 incorrectly introduced and restored operation with touch \n *                                          devices\n * 2019-11-12   1.1.1       Roberto D'Amico Fixed Issue #4 - Now JoyStick work in any position in the page, not only \n *                                          at 0,0\n * \n * The MIT License (MIT)\n *\n *  This file is part of the JoyStick Project (https://github.com/bobboteck/JoyStick).\n *\tCopyright (c) 2015 Roberto D'Amico (Bobboteck).\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nlet StickStatus =\n{\n    xPosition: 0,\n    yPosition: 0,\n    x: 0,\n    y: 0,\n    cardinalDirection: \"C\"\n};\n\n/**\n * @desc Principal object that draw a joystick, you only need to initialize the object and suggest the HTML container\n * @costructor\n * @param container {String} - HTML object that contains the Joystick\n * @param parameters (optional) - object with following keys:\n *  title {String} (optional) - The ID of canvas (Default value is 'joystick')\n *  width {Int} (optional) - The width of canvas, if not specified is setted at width of container object (Default value is the width of container object)\n *  height {Int} (optional) - The height of canvas, if not specified is setted at height of container object (Default value is the height of container object)\n *  internalFillColor {String} (optional) - Internal color of Stick (Default value is '#00AA00')\n *  internalLineWidth {Int} (optional) - Border width of Stick (Default value is 2)\n *  internalStrokeColor {String}(optional) - Border color of Stick (Default value is '#003300')\n *  externalLineWidth {Int} (optional) - External reference circonference width (Default value is 2)\n *  externalStrokeColor {String} (optional) - External reference circonference color (Default value is '#008000')\n *  autoReturnToCenter {Bool} (optional) - Sets the behavior of the stick, whether or not, it should return to zero position when released (Default value is True and return to zero)\n * @param callback {StickStatus} - \n */\nvar JoyStick = (function(container, parameters, callback)\n{\n    parameters = parameters || {};\n    var title = (typeof parameters.title === \"undefined\" ? \"joystick\" : parameters.title),\n        width = (typeof parameters.width === \"undefined\" ? 0 : parameters.width),\n        height = (typeof parameters.height === \"undefined\" ? 0 : parameters.height),\n        internalFillColor = (typeof parameters.internalFillColor === \"undefined\" ? \"#00AA00\" : parameters.internalFillColor),\n        internalLineWidth = (typeof parameters.internalLineWidth === \"undefined\" ? 2 : parameters.internalLineWidth),\n        internalStrokeColor = (typeof parameters.internalStrokeColor === \"undefined\" ? \"#003300\" : parameters.internalStrokeColor),\n        externalLineWidth = (typeof parameters.externalLineWidth === \"undefined\" ? 2 : parameters.externalLineWidth),\n        externalStrokeColor = (typeof parameters.externalStrokeColor ===  \"undefined\" ? \"#008000\" : parameters.externalStrokeColor),\n        autoReturnToCenter = (typeof parameters.autoReturnToCenter === \"undefined\" ? true : parameters.autoReturnToCenter);\n\n    callback = callback || function(StickStatus) {};\n\n    // Create Canvas element and add it in the Container object\n    var objContainer = document.getElementById(container);\n    \n    // Fixing Unable to preventDefault inside passive event listener due to target being treated as passive in Chrome [Thanks to https://github.com/artisticfox8 for this suggestion]\n    objContainer.style.touchAction = \"none\";\n\n    var canvas = document.createElement(\"canvas\");\n    canvas.id = title;\n    if(width === 0) { width = objContainer.clientWidth; }\n    if(height === 0) { height = objContainer.clientHeight; }\n    canvas.width = width;\n    canvas.height = height;\n    objContainer.appendChild(canvas);\n    var context=canvas.getContext(\"2d\");\n\n    var pressed = 0; // Bool - 1=Yes - 0=No\n    var circumference = 2 * Math.PI;\n    var internalRadius = (canvas.width-((canvas.width/2)+10))/2;\n    var maxMoveStick = internalRadius + 5;\n    var externalRadius = internalRadius + 30;\n    var centerX = canvas.width / 2;\n    var centerY = canvas.height / 2;\n    var directionHorizontalLimitPos = canvas.width / 10;\n    var directionHorizontalLimitNeg = directionHorizontalLimitPos * -1;\n    var directionVerticalLimitPos = canvas.height / 10;\n    var directionVerticalLimitNeg = directionVerticalLimitPos * -1;\n    // Used to save current position of stick\n    var movedX=centerX;\n    var movedY=centerY;\n\n    // Check if the device support the touch or not\n    if(\"ontouchstart\" in document.documentElement)\n    {\n        canvas.addEventListener(\"touchstart\", onTouchStart, false);\n        document.addEventListener(\"touchmove\", onTouchMove, false);\n        document.addEventListener(\"touchend\", onTouchEnd, false);\n    }\n    else\n    {\n        canvas.addEventListener(\"mousedown\", onMouseDown, false);\n        document.addEventListener(\"mousemove\", onMouseMove, false);\n        document.addEventListener(\"mouseup\", onMouseUp, false);\n    }\n    // Draw the object\n    drawExternal();\n    drawInternal();\n\n    /******************************************************\n     * Private methods\n     *****************************************************/\n\n    /**\n     * @desc Draw the external circle used as reference position\n     */\n    function drawExternal()\n    {\n        context.beginPath();\n        context.arc(centerX, centerY, externalRadius, 0, circumference, false);\n        context.lineWidth = externalLineWidth;\n        context.strokeStyle = externalStrokeColor;\n        context.stroke();\n    }\n\n    /**\n     * @desc Draw the internal stick in the current position the user have moved it\n     */\n    function drawInternal()\n    {\n        context.beginPath();\n        if(movedX<internalRadius) { movedX=maxMoveStick; }\n        if((movedX+internalRadius) > canvas.width) { movedX = canvas.width-(maxMoveStick); }\n        if(movedY<internalRadius) { movedY=maxMoveStick; }\n        if((movedY+internalRadius) > canvas.height) { movedY = canvas.height-(maxMoveStick); }\n        context.arc(movedX, movedY, internalRadius, 0, circumference, false);\n        // create radial gradient\n        var grd = context.createRadialGradient(centerX, centerY, 5, centerX, centerY, 200);\n        // Light color\n        grd.addColorStop(0, internalFillColor);\n        // Dark color\n        grd.addColorStop(1, internalStrokeColor);\n        context.fillStyle = grd;\n        context.fill();\n        context.lineWidth = internalLineWidth;\n        context.strokeStyle = internalStrokeColor;\n        context.stroke();\n    }\n\n    /**\n     * @desc Events for manage touch\n     */\n    function onTouchStart(event) \n    {\n        pressed = 1;\n    }\n\n    function onTouchMove(event)\n    {\n        if(pressed === 1 && event.targetTouches[0].target === canvas)\n        {\n            movedX = event.targetTouches[0].pageX;\n            movedY = event.targetTouches[0].pageY;\n            // Manage offset\n            if(canvas.offsetParent.tagName.toUpperCase() === \"BODY\")\n            {\n                movedX -= canvas.offsetLeft;\n                movedY -= canvas.offsetTop;\n            }\n            else\n            {\n                movedX -= canvas.offsetParent.offsetLeft;\n                movedY -= canvas.offsetParent.offsetTop;\n            }\n            // Delete canvas\n            context.clearRect(0, 0, canvas.width, canvas.height);\n            // Redraw object\n            drawExternal();\n            drawInternal();\n\n            // Set attribute of callback\n            StickStatus.xPosition = movedX;\n            StickStatus.yPosition = movedY;\n            StickStatus.x = (100*((movedX - centerX)/maxMoveStick)).toFixed();\n            StickStatus.y = ((100*((movedY - centerY)/maxMoveStick))*-1).toFixed();\n            StickStatus.cardinalDirection = getCardinalDirection();\n            callback(StickStatus);\n        }\n    } \n\n    function onTouchEnd(event) \n    {\n        pressed = 0;\n        // If required reset position store variable\n        if(autoReturnToCenter)\n        {\n            movedX = centerX;\n            movedY = centerY;\n        }\n        // Delete canvas\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        // Redraw object\n        drawExternal();\n        drawInternal();\n\n        // Set attribute of callback\n        StickStatus.xPosition = movedX;\n        StickStatus.yPosition = movedY;\n        StickStatus.x = (100*((movedX - centerX)/maxMoveStick)).toFixed();\n        StickStatus.y = ((100*((movedY - centerY)/maxMoveStick))*-1).toFixed();\n        StickStatus.cardinalDirection = getCardinalDirection();\n        callback(StickStatus);\n    }\n\n    /**\n     * @desc Events for manage mouse\n     */\n    function onMouseDown(event) \n    {\n        pressed = 1;\n    }\n\n    /* To simplify this code there was a new experimental feature here: https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/offsetX , but it present only in Mouse case not metod presents in Touch case :-( */\n    function onMouseMove(event) \n    {\n        if(pressed === 1)\n        {\n            movedX = event.pageX;\n            movedY = event.pageY;\n            // Manage offset\n            if(canvas.offsetParent.tagName.toUpperCase() === \"BODY\")\n            {\n                movedX -= canvas.offsetLeft;\n                movedY -= canvas.offsetTop;\n            }\n            else\n            {\n                movedX -= canvas.offsetParent.offsetLeft;\n                movedY -= canvas.offsetParent.offsetTop;\n            }\n            // Delete canvas\n            context.clearRect(0, 0, canvas.width, canvas.height);\n            // Redraw object\n            drawExternal();\n            drawInternal();\n\n            // Set attribute of callback\n            StickStatus.xPosition = movedX;\n            StickStatus.yPosition = movedY;\n            StickStatus.x = (100*((movedX - centerX)/maxMoveStick)).toFixed();\n            StickStatus.y = ((100*((movedY - centerY)/maxMoveStick))*-1).toFixed();\n            StickStatus.cardinalDirection = getCardinalDirection();\n            callback(StickStatus);\n        }\n    }\n\n    function onMouseUp(event) \n    {\n        pressed = 0;\n        // If required reset position store variable\n        if(autoReturnToCenter)\n        {\n            movedX = centerX;\n            movedY = centerY;\n        }\n        // Delete canvas\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        // Redraw object\n        drawExternal();\n        drawInternal();\n\n        // Set attribute of callback\n        StickStatus.xPosition = movedX;\n        StickStatus.yPosition = movedY;\n        StickStatus.x = (100*((movedX - centerX)/maxMoveStick)).toFixed();\n        StickStatus.y = ((100*((movedY - centerY)/maxMoveStick))*-1).toFixed();\n        StickStatus.cardinalDirection = getCardinalDirection();\n        callback(StickStatus);\n    }\n\n    function getCardinalDirection()\n    {\n        let result = \"\";\n        let orizontal = movedX - centerX;\n        let vertical = movedY - centerY;\n        \n        if(vertical >= directionVerticalLimitNeg && vertical <= directionVerticalLimitPos)\n        {\n            result = \"C\";\n        }\n        if(vertical < directionVerticalLimitNeg)\n        {\n            result = \"N\";\n        }\n        if(vertical > directionVerticalLimitPos)\n        {\n            result = \"S\";\n        }\n        \n        if(orizontal < directionHorizontalLimitNeg)\n        {\n            if(result === \"C\")\n            { \n                result = \"W\";\n            }\n            else\n            {\n                result += \"W\";\n            }\n        }\n        if(orizontal > directionHorizontalLimitPos)\n        {\n            if(result === \"C\")\n            { \n                result = \"E\";\n            }\n            else\n            {\n                result += \"E\";\n            }\n        }\n        \n        return result;\n    }\n\n    /******************************************************\n     * Public methods\n     *****************************************************/\n\n    /**\n     * @desc The width of canvas\n     * @return Number of pixel width \n     */\n    this.GetWidth = function () \n    {\n        return canvas.width;\n    };\n\n    /**\n     * @desc The height of canvas\n     * @return Number of pixel height\n     */\n    this.GetHeight = function () \n    {\n        return canvas.height;\n    };\n\n    /**\n     * @desc The X position of the cursor relative to the canvas that contains it and to its dimensions\n     * @return Number that indicate relative position\n     */\n    this.GetPosX = function ()\n    {\n        return movedX;\n    };\n\n    /**\n     * @desc The Y position of the cursor relative to the canvas that contains it and to its dimensions\n     * @return Number that indicate relative position\n     */\n    this.GetPosY = function ()\n    {\n        return movedY;\n    };\n\n    /**\n     * @desc Normalizzed value of X move of stick\n     * @return Integer from -100 to +100\n     */\n    this.GetX = function ()\n    {\n        return (100*((movedX - centerX)/maxMoveStick)).toFixed();\n    };\n\n    /**\n     * @desc Normalizzed value of Y move of stick\n     * @return Integer from -100 to +100\n     */\n    this.GetY = function ()\n    {\n        return ((100*((movedY - centerY)/maxMoveStick))*-1).toFixed();\n    };\n\n    /**\n     * @desc Get the direction of the cursor as a string that indicates the cardinal points where this is oriented\n     * @return String of cardinal point N, NE, E, SE, S, SW, W, NW and C when it is placed in the center\n     */\n    this.GetDir = function()\n    {\n        return getCardinalDirection();\n    };\n});\n"],"names":[],"version":3,"file":"index.9bcf0ad7.js.map"}